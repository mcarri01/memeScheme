
I like memes

!@ Arithmetic #$

empty

!@ Errors #$

1 a meme
spicy b meme
1 + check-error
1 2 3 + check-error
1.int 1 + check-error
spicy.int 1 + check-error
"hello".int 1 + check-error
a.in 1 + check-error
b.bool 1 + check-error
b.int 1 + check-error
c.int 1 + check-error
spicy 1 + check-error
"hello" 1 + check-error
c 1 + check-error
0 3 / check-error
0 3 % check-error

!@ Test with two literals #$
2 1 1 + check-expect
2 1 3 - check-expect
6 2 3 * check-expect
3 2 6 / check-expect
1 3 7 % check-expect
8 3 2 ^ check-expect
(720 (6 !) check-expect)
(15 (225 v/) check-expect)






!@ Tests with one variable of a singular type #$
1 x meme
2 x.int 1 + check-expect
2 1 x.int + check-expect
2 x 1 + check-expect
2 1 x + check-expect
2 x.int x.int + check-expect
2 x x + check-expect

!@ Tests with one variable of multiple types
   int was declared first #$
spicy x meme
2 x.int 1 + check-expect
2 1 x.int + check-expect
2 x 1 + check-expect
2 1 x + check-expect
2 x.int x.int + check-expect
2 x x + check-expect

!@ Tests with two variables, one of a singular type, one of multiple types
   int was declared first for both variables #$
1 y meme
2 x y + check-expect
2 y.int x + check-expect
2 x y.int + check-expect
2 x.int y + check-expect
2 y x.int + check-expect 
2 x.int y.int + check-expect

!@ Tests with two variables, both of multiple types #$
spicy y meme
2 x y + check-expect
2 y.int x + check-expect
2 x y.int + check-expect
2 x.int y + check-expect
2 y x.int + check-expect 
2 x.int y.int + check-expect





I like memes

!@ Booleans (arrity: 2) #$

empty

!@ Errors #$

spicy a meme
33 b meme
spicy and check-error
spicy normie spicy and check-error
spicy.bool spicy and check-error
33.bool spicy and check-error
"hello".bool spicy and check-error
a.bol spicy and check-error
b.bool spicy and check-error
a.int spicy and check-error
c.bool spicy and check-error
33 spicy and check-error
"hello" spicy and check-error
c spicy and check-error


!@ Test with two literals #$
spicy spicy spicy and check-expect
normie normie spicy and check-expect
spicy normie spicy or check-expect
spicy normie normie nand check-expect
spicy spicy normie nand check-expect
spicy normie spicy nand check-expect
normie spicy spicy nand check-expect
(spicy (normie normie nor) check-expect)


!@ Tests with one variable of a singular type #$
spicy x meme
spicy x.bool spicy and check-expect
spicy spicy x.bool and check-expect
spicy x spicy and check-expect
spicy spicy x and check-expect
spicy x.bool x.bool and check-expect
spicy x x and check-expect

!@ Tests with one variable of multiple types
   int was declared first #$
33 x meme
spicy x.bool spicy and check-expect
spicy spicy x.bool and check-expect
spicy x spicy and check-expect
spicy spicy x and check-expect
spicy x.bool x.bool and check-expect
spicy x x and check-expect

!@ Tests with two variables, one of a singular type, one of multiple types
   int was declared first for both variables #$
normie y meme
normie x y and check-expect
normie y.bool x and check-expect
normie x y.bool and check-expect
spicy x.bool y or check-expect
spicy y x.bool or check-expect 
spicy x.bool y.bool or check-expect

!@ Tests with two variables, both of multiple types #$
33 y meme
normie x y and check-expect
spicy x y or check-expect
spicy x y xor check-expect
normie y.bool x and check-expect
normie x y.bool and check-expect
spicy x.bool y xor check-expect
spicy y x.bool xor check-expect 
spicy x.bool y.bool xor check-expect





I like memes


!@ Check #$
!@ Checks various invalid permutations of check-expects and check-errors
   The rest of the file serves to test all valid examples of the two #$

!@check-error#$
!@check-expect#$
!@1 check-expect#$
!@check-error check-error#$
!@check-error check-expect#$
!@check-expect check-error#$
!@check-expect check-expect#$
!@2 + 1 1 check-expect check-error#$
!@3 + 1 1 check-expect check-error#$
!@error check-error check-expect#$
!@check-error check-expect check-error#$
!@check-expect check-error check-expect#$
!@!@ check-error#$
!@#$!@ check-error#$
!@2 #$!@ 1 1 + check-expect#$




!@ Comments #$

!@ Tests dividing up I like memes at the top of the file #$
!@My name is Matthew#$I!@My name is Matthew#$ !@My name is Matthew#$l!@My name is Matthew#$i!@My name is Matthew#$k!@My name is Matthew#$e!@My name is Matthew#$ !@My name is Matthew#$m!@My name is Matthew#$e!@My name is Matthew#$m!@My name is Matthew#$e!@My name is Matthew#$s!@My name is Matthew
My name is Matthew
#$

empty

!@ Checks various unusual commenting cases
   The rest of the file serves to test all valid examples
   All examples are wrapped in a comment #$

!@ Checks comments that begins with the end #$
!@
3 --put an END_COMMENT here-- x meme check-error
#$

!@ Checks comments with lots of start indicators in a row #$
!@!@!@!@something something #$
!@
!@
!@
!@
!@
something something
#$

I like memes

!@ Checks multiple block comments in a line #$
!@My name is Matthew#$ 2 !@My name is Matthew#$ 1 !@My name is Matthew#$ 1 !@My name is Matthew#$ + !@My name is Matthew#$ check-expect !@My name is Matthew#$

!@ Checks comments that are enclosed on one line and another one starts on the same line #$
3!@My name is Matthew#$ 1 2 + check-expect !@ check-error
My name is Matthew
My name is Matthew My name is Matthew#$

!@ Tests dividing up I like memes with comments #$
!@My name is Matthew#$I!@My name is Matthew#$ !@My name is Matthew#$l!@My name is Matthew#$i!@My name is Matthew#$k!@My name is Matthew#$e!@My name is Matthew#$ !@My name is Matthew#$m!@My name is Matthew#$e!@My name is Matthew#$m!@My name is Matthew#$e!@My name is Matthew#$s!@My name is Matthew
My name is Matthew
#$

!@
test
#$

!@
--remove END_COMMENT for endless memer error--
#$



I like memes

!@ Comparison #$

empty

!@ Errors #$
1 a meme
spicy b meme
1 2 3 < check-error
1.int 1 < check-error
spicy.int 1 < check-error
"hello".int 1 < check-error
a.in 1 < check-error
b.bool 1 < check-error
b.int 1 < check-error
c.int 1 < check-error
1 c < check-error
1 b > check-error
spicy 1 < check-error
"hello" 1 < check-error
c "hello" < check-error



!@ Test with two literals #$
spicy  1 1 <= check-expect
spicy "hello" "hello" <= check-expect

!@ Tests with one variable of a singular type #$
1 x meme
spicy x.int 1 <= check-expect
spicy 1 x.int <= check-expect
spicy x 1 <= check-expect
spicy 1 x <= check-expect
spicy x.int x.int <= check-expect
spicy x x <= check-expect

"hello" a meme
spicy a.string "hello" <= check-expect
spicy "hello" a.string <= check-expect
spicy a "hello" <= check-expect
spicy "hello" a <= check-expect
spicy a.string a.string <= check-expect
spicy a a <= check-expect


!@ Tests with one variable of multiple types
   int was declared first #$
"hello" x meme
spicy x.int 1 <= check-expect
spicy 1 x.int <= check-expect
spicy x 1 <= check-expect
spicy 1 x <= check-expect
spicy x.int x.int <= check-expect

!@ Tests with two variables, one of a singular type, one of multiple types
   int was declared first for both variables #$
2 y meme
normie x y <= check-expect
spicy y.int x <= check-expect
normie x y.int <= check-expect
normie x.int y <= check-expect
spicy y x.int <= check-expect 
normie x.int y.int <= check-expect


!@ Tests with two variables, both of multiple types #$
"hello" y meme
spicy x y > check-expect
normie y.int x >= check-expect
spicy x y.int >= check-expect
spicy x.int y >= check-expect
normie y x.int >= check-expect
spicy x.int y.int >= check-expect
normie y.int x.int >= check-expect

spicy q meme
2 q meme
"hello" q meme
"hello" r meme
1 r meme

spicy q.string r.string <= check-expect
normie r.int q.int <= check-expect
spicy q r <= check-expect
normie r q <= check-expect


I like memes


!@ Define #$
empty

!@ Errors #$

1.int x meme check-error
spicy.bool x meme check-error
"hello".string x meme check-error
1 g meme
g.in x meme check-error
g.bool x meme check-error
g.string x meme check-error
b.string x meme check-error
b x meme check-error
1 12 meme check-error
1 spicy meme check-error
1 normie meme check-error
1 mild meme check-error
1 "hello" meme check-error
1 error meme check-error
1 MEME meme check-error
1 b.int meme check-error
1 //x meme check-error
1 b.int check-error




!@ Tests with one literal as assignment #$
1 x meme
1 x print check-expect
1 x.int print check-expect
spicy x meme
1 x print check-expect
spicy x.bool print check-expect
2 x meme
2 x print check-expect
2 x.int print check-expect
spicy y meme
spicy y print check-expect
spicy x.bool print check-expect
"hello" z meme
"hello" z print check-expect
"hello" z.string print check-expect
1 z meme
"hello" z meme
"hello" z print check-expect
"hello" z.string print check-expect
1 z.int print check-expect
2 z meme
"hello" z print check-expect
2 z.int print check-expect


!@ Tests with one variable of a singular type as assignment #$
1 a meme
a b meme
1 b print check-expect
1 b.int print check-expect
spicy c meme
c d meme
spicy d print check-expect
spicy d.bool print check-expect
"hello" e meme
e f meme
"hello" f print check-expect
"hello" f.string print check-expect


!@ Test with one variable of multiple types as assignment
   int was declared first #$
1 m meme
spicy m meme
"hello" m meme
m n meme
1 n print check-expect
1 n.int print check-expect
spicy n.bool print check-expect
"hello" n.string print check-expect

   !@ bool was declared first #$
spicy o meme
"hello" o meme
1 o meme
o p meme
spicy p print check-expect
spicy p.bool print check-expect
"hello" p.string print check-expect
1 p.int print check-expect

   !@ string was declared first #$
"hello" q meme
1 q meme
spicy q meme
q r meme
"hello" r print check-expect
"hello" r.string print check-expect
1 r.int print check-expect
spicy r.bool print check-expect

	!@ assignment with dot operator #$
1 s meme
spicy s meme
"hello" s meme
s.int t meme
1 t print check-expect
1 t.int print check-expect

s.bool u meme
spicy u print check-expect
spicy u.bool print check-expect

s.string v meme
"hello" v print check-expect
"hello" v.string print check-expect


!@ Define a variable from a previous variable
   (some of these tests might be repeats) #$

empty
1 a meme
"hello" a meme
a b meme
1 a print check-expect
1 b print check-expect
1 a.int print check-expect
1 b.int print check-expect
"hello" a.string print check-expect
"hello" b.string print check-expect

empty

!@ The following tests all use variables to declare new variables
   (some tests may be repeats of earlier tests) #$

!@ Create a new variable by using an old dot-operated variable as the value #$
1 a meme
"hello" a meme
a.string b meme

1 a print check-expect
"hello" b print check-expect
1 a.int print check-expect
"hello" a.string print check-expect
b.int print check-error

!@ Create a new variable by using an old non-dot-operated variable as the value #$
1 c meme
"hello" c meme
c d meme

1 c print check-expect
1 d print check-expect
1 c.int print check-expect
1 d.int print check-expect





!@ Create a new variable by using an old dot-operated variable as the value #$
1 e meme
(spicy (3 ("hello" f meme) meme) meme)
!@"hello" f meme
3 f meme
spicy f meme#$

f e meme

3 e print check-expect
"hello" f print check-expect
3 e.int print check-expect
3 f.int print check-expect
spicy e.bool print check-expect
spicy f.bool print check-expect
"hello" e.string print check-expect
"hello" f.string print check-expect

!@ nested meme with stress test#$
(spicy (((spicy not) (normie (13 4 //+ meme 2 ! ^ - 13 4 3 + 5 * % / 1 13 4 2 ! ^ - 13 4 9 v/ + 5 * % / - <>) xor) nor) not) check-expect)

I like memes



!@ Equal/Not equal #$

empty

!@ Errors #$
1 a meme
spicy b meme
1 2 3 = check-error
1.int 1 = check-error
spicy.int 1 = check-error
"hello".int 1 = check-error
a.in 1 = check-error
b.bool 1 = check-error
b.int 1 = check-error
c.int 1 = check-error
1 c = check-error
1 b = check-error
spicy 1 = check-error
"hello" 1 = check-error
"hello" spicy = check-error
"hello" 1 = check-error
"hello" a meme
a b = check-error



!@ Test with two literals #$
spicy 1 1 = check-expect
spicy spicy spicy = check-expect
spicy "hello" "hello" = check-expect


!@ Tests with one variable of a singular type #$
1 x meme
spicy x.int 1 = check-expect
spicy 1 x.int = check-expect
spicy x 1 = check-expect
spicy 1 x = check-expect
spicy x.int x.int = check-expect
spicy x x = check-expect

"hello" g meme
normie g.string "goodbye" = check-expect
normie "goodbye" g.string = check-expect
normie g "goodbye" = check-expect
normie "goodbye" g = check-expect
spicy g.string g.string = check-expect
spicy g g = check-expect


!@ Tests with one variable of multiple types
   int was declared first #$
"hello" x meme
spicy x.int 1 = check-expect
spicy 1 x.int = check-expect
spicy x 1 = check-expect
spicy 1 x = check-expect
spicy x.int x.int = check-expect
spicy x.string "hello" = check-expect
spicy "hello" x.string = check-expect
spicy x "hello" = check-expect
spicy "hello" x = check-expect


!@ Tests with two variables, one of a singular type, one of multiple types
   int was declared first for both variables #$
2 y meme
normie x y = check-expect
normie y.int x = check-expect
normie x y.int = check-expect
normie x.int y = check-expect
normie y x.int = check-expect 
normie x.int y.int = check-expect


!@ Tests with two variables, both of multiple types
   int was declared first for x;
   string was declared first for z#$ 
"hello" z meme
2 z meme
spicy x z = check-expect
normie z x = check-expect
normie z.int x = check-expect
normie x z.int = check-expect
normie x.int z = check-expect
normie z x.int = check-expect
normie x.int z.int = check-expect
spicy z.string x = check-expect
spicy x z.string = check-expect
spicy x.string z = check-expect
spicy z x.string = check-expect
spicy x.string z.string = check-expect

spicy q meme
2 q meme
"hello" q meme

"hello" r meme
1 r meme

spicy q.string r.string = check-expect
normie r.int q.int = check-expect
spicy q r = check-expect
normie r q = check-expect
spicy q q = check-expect
spicy r r = check-expect


I like memes


!@ Larger/Smaller #$
empty

!@ Errors #$

1 a meme
1 a larger? check-error
larger? check-error
spicy larger? check-error
33.int larger? check-error
"hello".int larger? check-error
a.it larger? check-error
b.int larger? check-error
a.bool larger? check-error
c larger? check-error
"hello" larger? check-error


!@ Tests with one literals #$
1 larger?
1 smaller?


!@ Test with one variable of a singular type #$
1 x meme
x larger?
x.int smaller?


!@ Test with one variable of multiple types
   bool was declared first #$
spicy x meme
x larger?
x.int smaller?


!@ Test with one variable of multiple types
   int was declared first #$
1 y meme
spicy y meme
y larger?
y.int smaller?

I like memes


!@ Bool #$
empty

!@ Errors #$

spicy a meme
spicy 1 not check-error
not check-error
spicy.bool not check-error
33.bool not check-error
"hello".bool not check-error
a.bol not check-error
b.bool not check-error
a.int not check-error
c not check-error
33 not check-error


!@ Tests with one literals #$
normie spicy not check-expect
spicy normie not check-expect
mild not
mild not
mild not
mild not


!@ Test with one variable of a singular type #$
spicy x meme
normie x not check-expect
normie x.bool not check-expect


!@ Test with one variable of multiple types
   bool was declared first #$
1 x meme
normie x not check-expect
normie x.bool not check-expect


!@ Test with one variable of multiple types
   int was declared first #$
1 y meme
spicy y meme 
normie y not check-expect
normie y.bool not check-expect

I like memes


!@ Print #$
empty

!@ Errors #$

1 a meme
spicy a print check-error
print check-error
1.int print check-error
33.bool print check-error
"hello".bool print check-error
a.it print check-error
b.bool print check-error
a.bool print check-error
c print check-error
1 print 2 + check-error


!@ Tests with one literals #$
1 1 print check-expect
spicy spicy print check-expect
"hello" "hello" print check-expect


!@ Test with one variable of a singular type #$
1 x meme
1 x print check-expect
1 x.int print check-expect


!@ Test with one variable of multiple types
   int was declared first #$
spicy x meme
"hello" x meme
1 x print check-expect
spicy x.bool print check-expect
"hello" x.string print check-expect

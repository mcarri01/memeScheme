
I like memes

!@ Checks that MEME is correct at the start 
   Must be the first lines of code, hence the file name#$

Nothing MEME check-expect

empty
Nothing MEME check-expect
I like memes

!@ Arithmetic #$

empty

!@ Errors #$

1 a meme
spicy b meme
1 + check-error
1 2 3 + check-error
1.num 1 + check-error
spicy.num 1 + check-error
"hello".num 1 + check-error
a.in 1 + check-error
b.bool 1 + check-error
b.num 1 + check-error
c.num 1 + check-error
spicy 1 + check-error
"hello" 1 + check-error
c 1 + check-error
0 3 / check-error
0 3 % check-error

!@ Test with two literals #$
2 1 1 + check-expect
2 1 3 - check-expect
6 2 3 * check-expect
3 2 6 / check-expect
1 3 seven % check-expect
8 3 2 ^ check-expect
(720 (6 !) check-expect)
(15 (225 v/) check-expect)
1 1 int check-expect
1 1.2 int check-expect
-1 -1 int check-expect
-1 -1.2 int check-expect






!@ Tests with one variable of a singular type #$
1 x meme
2 x.num 1 + check-expect
2 1 x.num + check-expect
2 x 1 + check-expect
2 1 x + check-expect
2 x.num x.num + check-expect
2 x x + check-expect

!@ Tests with one variable of multiple types
   num was declared first #$
spicy x meme
2 x.num 1 + check-expect
2 1 x.num + check-expect
2 x 1 + check-expect
2 1 x + check-expect
2 x.num x.num + check-expect
2 x x + check-expect

!@ Tests with two variables, one of a singular type, one of multiple types
   num was declared first for both variables #$
1 y meme
2 x y + check-expect
2 y.num x + check-expect
2 x y.num + check-expect
2 x.num y + check-expect
2 y x.num + check-expect 
2 x.num y.num + check-expect

!@ Tests with two variables, both of multiple types #$
spicy y meme
2 x y + check-expect
2 y.num x + check-expect
2 x y.num + check-expect
2 x.num y + check-expect
2 y x.num + check-expect 
2 x.num y.num + check-expect





I like memes

!@ Booleans (arrity: 2) #$

empty

!@ Errors #$

spicy a meme
33 b meme
spicy and check-error
spicy normie spicy and check-error
spicy.bool spicy and check-error
33.bool spicy and check-error
"hello".bool spicy and check-error
a.bol spicy and check-error
b.bool spicy and check-error
a.num spicy and check-error
c.bool spicy and check-error
33 spicy and check-error
"hello" spicy and check-error
c spicy and check-error


!@ Test with two literals #$
spicy spicy spicy and check-expect
normie normie spicy and check-expect
spicy normie spicy or check-expect
spicy normie normie nand check-expect
spicy spicy normie nand check-expect
spicy normie spicy nand check-expect
normie spicy spicy nand check-expect
(spicy (normie normie nor) check-expect)


!@ Tests with one variable of a singular type #$
spicy x meme
spicy x.bool spicy and check-expect
spicy spicy x.bool and check-expect
spicy x spicy and check-expect
spicy spicy x and check-expect
spicy x.bool x.bool and check-expect
spicy x x and check-expect

!@ Tests with one variable of multiple types
   num was declared first #$
33 x meme
spicy x.bool spicy and check-expect
spicy spicy x.bool and check-expect
spicy x spicy and check-expect
spicy spicy x and check-expect
spicy x.bool x.bool and check-expect
spicy x x and check-expect

!@ Tests with two variables, one of a singular type, one of multiple types
   num was declared first for both variables #$
normie y meme
normie x y and check-expect
normie y.bool x and check-expect
normie x y.bool and check-expect
spicy x.bool y or check-expect
spicy y x.bool or check-expect 
spicy x.bool y.bool or check-expect

!@ Tests with two variables, both of multiple types #$
33 y meme
normie x y and check-expect
spicy x y or check-expect
spicy x y xor check-expect
normie y.bool x and check-expect
normie x y.bool and check-expect
spicy x.bool y xor check-expect
spicy y x.bool xor check-expect 
spicy x.bool y.bool xor check-expect





I like memes

empty

!@ nums #$
("testing" (Nothing (["123", [], 4] (123 (spicy x meme) meme) meme) meme) meme)

3 3 num check-expect
3 3.0 num check-expect
3.2 3.2 num check-expect
3 "3" num check-expect
3 "3.0" num check-expect
3.2 "3.2" num check-expect
3 [3] num check-expect
3 [3.0] num check-expect
3.2 [3.2] num check-expect

123 x num check-expect
x.bool num check-error
123 x.num num check-expect
x.list num check-error
x.nonetype num check-error
x.str num check-error

spicy num check-error
normie num check-error
mild num check-error
Nothing num check-error
"" num check-error
"not a num" num check-error
[] num check-error
[1, 2] num check-error
["3"] num check-error
[spicy, 2] num check-error
[[1]] num check-error


!@ bools #$
spicy "spicy" bool check-expect
normie "normie" bool check-expect
!@spicy "mild" bool check-expect
spicy "normie" bool check-expect#$
spicy spicy bool check-expect
normie normie bool check-expect
!@spicy mild bool check-expect
normie mild bool check-expect#$
spicy [spicy] bool check-expect
normie [normie] bool check-expect
!@spicy [mild] bool check-expect
normie [mild] bool check-expect#$

spicy x bool check-expect
spicy x.bool bool check-expect
x.num bool check-error
x.list bool check-error
x.nonetype bool check-error
x.str bool check-error


1 bool check-error
Nothing bool check-error
"" bool check-error
"not a num" bool check-error
[] bool check-error
[spicy, normie] bool check-error
["spicy"] bool check-error
[2, spicy] bool check-error
[[spicy]] bool check-error


!@ strings #$
"3" 3 str check-expect
"3" 3.0 str check-expect
"3.2" 3.2 str check-expect
"spicy" spicy str check-expect
"normie" normie str check-expect
mild str
"" "" str check-expect
"hello" "hello" str check-expect
"123" "123" str check-expect
"spicy" "spicy" str check-expect
"[1, spicy, Nothing]" "[1, spicy, Nothing]" str check-expect
"Nothing" "Nothing" str check-expect
"[3]" [3] str check-expect
"[3]" [3.0] str check-expect
"[3.2]" [3.2] str check-expect
"[3.2, spicy, normie, []]" [3.2, spicy, normie, []] str check-expect
"[]" [] str check-expect
"Nothing" Nothing str check-expect

[1, ] str check-error
[1, ] x check-error
"spicy" x str check-expect
"spicy" x.bool str check-expect
"123" x.num str check-expect
"[<'>123<'>, [], 4]" x.list str check-expect
"Nothing" x.nonetype str check-expect
"testing" x.str str check-expect


!@ lists #$
[3] 3 list check-expect
[3] 3.0 list check-expect
[3.2] 3.2 list check-expect
[spicy] spicy list check-expect
[normie] normie list check-expect
"" list
[""] "" list check-expect
["3"] "3" list check-expect
["hello"] "hello" list check-expect
[] [] list check-expect
[1, spicy, "hello", [1, 2, 3]] [1, spicy, "hello", [1, 2, 3]] list check-expect
["", "", "", ""] ["", "", "", ""] list check-expect
[[[""]]] [[[""]]] list check-expect
[Nothing] Nothing list check-expect

[1, ] list check-error
[ 1,] list check-error
list check-error
1 1 list check-error
[1, 2, 3] [1, 2,  3] list check-expect
[spicy] x list check-expect
[spicy] x.bool list check-expect
[123] x.num list check-expect
["123", [], 4] x.list list check-expect
[Nothing] x.nonetype list check-expect
["testing"] x.str list check-expect

!@ nonetype #$
Nothing "Nothing" nonetype check-expect
Nothing Nothing nonetype check-expect
Nothing [Nothing] nonetype check-expect

1 nonetype check-error
spicy nonetype check-error
normie nonetype check-error
mild nonetype check-error
"" nonetype check-error
"not Nothing" nonetype check-error
[] nonetype check-error
[Nothing, Nothing] nonetype check-error
["Nothing"] nonetype check-error
[2, Nothing] nonetype check-error
[[Nothing]] nonetype check-error


!@ stress tests #$
["[<'>123<'>]"] ((((((([123] num) str) num) str) list) str) list) check-expect
["[<'>spicy<'>]"] ((((((([spicy] bool) str) bool) str) list) str) list) check-expect
["[<'>Nothing<'>]"] ((((((([Nothing] nonetype) str) nonetype) str) list) str) list) check-expect
"[<'>[<'>[<'>    <'>]<'>]<'>]" "    " str list str list str list str check-expect
"a<'>b<'>c[<'>[<'>[<'>    <'>]<'>]<'>]" "    " str list str list str list str "a<'>b<'>c" ++ check-expect
["[<'>1   2   3<'>]"]
"1   2   3" list str list "1   2   3" list str list check-expect
["[<'>1   2   3<'>]"] "1   2   3" list str list check-expect
["[<'>   1   2   3   <'>]"] "   1   2   3   " list str list check-expect


4 16 v/ check-expect
16.0 v/
0.5 16.2 ^ 16.2 v/ check-expect
-16 v/ check-error
24 4 ! check-expect
4.0 !
24.0 4.0 ! check-expect
-4 ! check-error
10.2 ! check-error








I like memes


!@ Check #$
!@ Checks various invalid permutations of check-expects and check-errors
   The rest of the file serves to test all valid examples of the two #$

!@check-error#$
!@check-expect#$
!@1 check-expect#$
!@check-error check-error#$
!@check-error check-expect#$
!@check-expect check-error#$
!@check-expect check-expect#$
!@2 + 1 1 check-expect check-error#$
!@3 + 1 1 check-expect check-error#$
!@error check-error check-expect#$
!@check-error check-expect check-error#$
!@check-expect check-error check-expect#$



I like memes

empty

Nothing 1 1 = claim check-expect
Nothing 1 spicy ((3 x meme) (1.2 1.8 +) =) if claim check-expect
1 claim check-error
Nothing spicy claim check-expect
spicy (Nothing (spicy claim) =) check-expect
!@1 2 = claim check-error#$
!@spicy (Nothing (normie claim) =) check-expect#$
!@normie claim check-error#$
!@normie claim#$

!@ Comments #$

!@ Tests dividing up I like memes at the top of the file #$
!@My name is Matthew#$I!@My name is Matthew#$ !@My name is Matthew#$l!@My name is Matthew#$i!@My name is Matthew#$k!@My name is Matthew#$e!@My name is Matthew#$ !@My name is Matthew#$m!@My name is Matthew#$e!@My name is Matthew#$m!@My name is Matthew#$e!@My name is Matthew#$s!@My name is Matthew
My name is Matthew
#$

empty

!@ Checks various unusual commenting cases
   The rest of the file serves to test all valid examples
   All examples are wrapped in a comment #$

!@ Checks comments that begins with the end #$
!@
3 --put an END_COMMENT here-- x meme check-error
#$

!@ Checks comments with lots of start indicators in a row #$
!@!@!@!@something something #$
!@
!@
!@
!@
!@
something something
#$

I like memes

!@ Checks multiple block comments in a line #$
!@My name is Matthew#$ 2 !@My name is Matthew#$ 1 !@My name is Matthew#$ 1 !@My name is Matthew#$ + !@My name is Matthew#$ check-expect !@My name is Matthew#$

!@ Checks comments that are enclosed on one line and another one starts on the same line #$
3!@My name is Matthew#$ 1 2 + check-expect !@ check-error
My name is Matthew
My name is Matthew My name is Matthew#$

!@ Tests dividing up I like memes with comments #$
!@My name is Matthew#$I!@My name is Matthew#$ !@My name is Matthew#$l!@My name is Matthew#$i!@My name is Matthew#$k!@My name is Matthew#$e!@My name is Matthew#$ !@My name is Matthew#$m!@My name is Matthew#$e!@My name is Matthew#$m!@My name is Matthew#$e!@My name is Matthew#$s!@My name is Matthew
My name is Matthew
#$

!@
test
#$

!@
--remove END_COMMENT for endless memer error--
#$


"!@" a meme
"#$" b meme
!@#$ "!@" c meme
!@#$ "#$" d meme
!@"#$ "!@" e meme
!@"#$ "#$" f meme

Nothing a print check-expect
Nothing b print check-expect
Nothing c print check-expect
Nothing d print check-expect
Nothing e print check-expect
Nothing f print check-expect

!@ hey there how are you doing?#$
"#$!@" x meme !@#$

!@ hey there how are you doing#$
"#$!@" x meme !@--remove start and end comment and you should get an endless memer error from the leftover quote #$


"!@#$" g meme
Nothing g print check-expect


!@
line of code here
#$ !@""#$ !@
#$

!@
line of code here
""#$ !@ #$


!@
"#$q "hello" q meme check-expect !@
#$


!@
"hello"
#$

!@
"hell #$ "#$" z meme
Nothing z print check-expect







I like memes

!@ Comparison #$

empty

!@ Errors #$
1 a meme
spicy b meme
1 2 3 < check-error
1.num 1 < check-error
spicy.num 1 < check-error
"hello".num 1 < check-error
a.in 1 < check-error
b.bool 1 < check-error
b.num 1 < check-error
c.num 1 < check-error
1 c < check-error
1 b > check-error
spicy 1 < check-error
"hello" 1 < check-error
c "hello" < check-error



!@ Test with two literals #$
spicy  1 1 <= check-expect
spicy "hello" "hello" <= check-expect

!@ Tests with one variable of a singular type #$
1 x meme
spicy x.num 1 <= check-expect
spicy 1 x.num <= check-expect
spicy x 1 <= check-expect
spicy 1 x <= check-expect
spicy x.num x.num <= check-expect
spicy x x <= check-expect

"hello" a meme
spicy a.str "hello" <= check-expect
spicy "hello" a.str <= check-expect
spicy a "hello" <= check-expect
spicy "hello" a <= check-expect
spicy a.str a.str <= check-expect
spicy a a <= check-expect


!@ Tests with one variable of multiple types
   num was declared first #$
"hello" x meme
spicy x.num 1 <= check-expect
spicy 1 x.num <= check-expect
spicy x 1 <= check-expect
spicy 1 x <= check-expect
spicy x.num x.num <= check-expect

!@ Tests with two variables, one of a singular type, one of multiple types
   num was declared first for both variables #$
2 y meme
normie x y <= check-expect
spicy y.num x <= check-expect
normie x y.num <= check-expect
normie x.num y <= check-expect
spicy y x.num <= check-expect 
normie x.num y.num <= check-expect


!@ Tests with two variables, both of multiple types #$
"hello" y meme
spicy x y > check-expect
normie y.num x >= check-expect
spicy x y.num >= check-expect
spicy x.num y >= check-expect
normie y x.num >= check-expect
spicy x.num y.num >= check-expect
normie y.num x.num >= check-expect

spicy q meme
2 q meme
"hello" q meme
"hello" r meme
1 r meme

spicy q.str r.str <= check-expect
normie r.num q.num <= check-expect
spicy q r <= check-expect
normie r q <= check-expect


I like memes

!@ String Concatanation #$

empty

"ab" ++ check-error
"ab" "ab" "ab" ++ check-error
"ab" 2 ++ check-error
"ab" spicy ++ check-error
"ab" [1, 2, 3] ++ check-error
"ab" Nothing ++ check-error

"cdab" "ab" "cd" ++ check-expect
"21" "1" "2" ++ check-expect
"[1, 2, 3,,4 5]1" "1" "[1, 2, 3,,4 5]" ++ check-expect
"NothingNothing" "Nothing" "Nothing" ++ check-expect
"mildmild" "mild" "mild" ++ check-expect
"spicynormie" "normie" "spicy" ++ check-expect
"" "" "" ++ check-expect


("hello" (1 x meme) meme)
"hello" "" x ++ check-expect

I like memes

empty

!@ "should" return an error but we don't go to the bad branch so it's kosher #$
1 (2 spicy +) 1 spicy if check-expect
1 1 (2 spicy +) normie if check-expect

!@ the bad branch is completely empty #$
1 spicy if check-error
1 normie if check-error
"Meme failed, as expected" MEME check-expect
normie if check-error
"Meme failed, as expected" MEME check-expect
if check-error


!@ Test the four "normal" cases #$
1 1 spicy ifTrue check-expect
Nothing 1 normie ifTrue check-expect
Nothing 1 spicy ifFalse check-expect
1 1 normie ifFalse check-expect

!@ Test various error cases#$
(1 "hello" +) spicy ifTrue check-error
Nothing (1 "hello" +) normie ifTrue check-expect
spicy ifTrue check-error
normie ifTrue check-error
"hello" 1 ifTrue check-error
"hello" "hello" ifTrue check-error
"hello" [spicy] ifTrue check-error
"hello" Nothing ifTrue check-error
ifTrue check-error

(1 "hello" +) normie ifFalse check-error
Nothing (1 "hello" +) spicy ifFalse check-expect
normie ifFalse check-error
spicy ifFalse check-error
"hello" 1 ifFalse check-error
"hello" "hello" ifFalse check-error
"hello" [spicy] ifFalse check-error
"hello" Nothing ifFalse check-error
ifFalse check-error

spicy x meme
1 2 1 x if check-expect
1 1 x ifTrue check-expect
1 1 (x not) ifFalse check-expect
Nothing 1 (x not) ifTrue check-expect
Nothing 1 x ifFalse check-expect



0 q spicy if check-error
5 q meme
5 (0 q spicy if) check-expect

j spicy ifTrue check-error
5 j meme
5 (j spicy ifTrue) check-expect

v normie ifFalse check-error
5 v meme
5 (v normie ifFalse) check-expect



I like memes


!@ Define #$
empty

!@ Errors #$

1.num x meme check-error
spicy.bool x meme check-error
"hello".str x meme check-error
1 g meme
g.in x meme check-error
g.bool x meme check-error
g.str x meme check-error
b.str x meme check-error
b x meme check-error
1 12 meme check-error
1 spicy meme check-error
1 normie meme check-error
1 mild meme check-error
1 "hello" meme check-error
1 error meme check-error
1 MEME meme check-error
1 b.num meme check-error
1 //x meme check-error
1 b.num check-error
1 ab"cd" meme check-error
1 ab]cd meme check-error
1 ab[cd meme check-error
1 [ab[]cd meme check-error
1 ab][cd meme check-error
1 ab.cd meme check-error
1 a<~bcd meme check-error
1 a<'>bcd meme check-error



!@ Tests with one literal as assignment #$
1 x meme
1 x check-expect
1 x.num check-expect
spicy x meme
1 x check-expect
spicy x.bool check-expect
2 x meme
2 x check-expect
2 x.num check-expect
spicy y meme
spicy y check-expect
spicy x.bool check-expect
"hello" z meme
"hello" z check-expect
"hello" z.str check-expect
1 z meme
"hello" z meme
"hello" z check-expect
"hello" z.str check-expect
1 z.num check-expect
2 z meme
"hello" z check-expect
2 z.num check-expect


!@ Tests with one variable of a singular type as assignment #$
1 a meme
a b meme
1 b check-expect
1 b.num check-expect
spicy c meme
c d meme
spicy d check-expect
spicy d.bool check-expect
"hello" e meme
e f meme
"hello" f check-expect
"hello" f.str check-expect


!@ Test with one variable of multiple types as assignment
   num was declared first #$
1 m meme
spicy m meme
"hello" m meme
m n meme
1 n check-expect
1 n.num check-expect
spicy n.bool check-expect
"hello" n.str check-expect

   !@ bool was declared first #$
spicy o meme
"hello" o meme
1 o meme
o p meme
spicy p check-expect
spicy p.bool check-expect
"hello" p.str check-expect
1 p.num check-expect

   !@ str was declared first #$
"hello" q meme
1 q meme
spicy q meme
q r meme
"hello" r check-expect
"hello" r.str check-expect
1 r.num check-expect
spicy r.bool check-expect

	!@ assignment with dot operator #$
1 s meme
spicy s meme
"hello" s meme
s.num t meme
1 t check-expect
1 t.num check-expect

s.bool u meme
spicy u check-expect
spicy u.bool check-expect

s.str v meme
"hello" v check-expect
"hello" v.str check-expect


!@ Define a variable from a previous variable
   (some of these tests might be repeats) #$

empty
1 a meme
"hello" a meme
a b meme
1 a check-expect
1 b check-expect
1 a.num check-expect
1 b.num check-expect
"hello" a.str check-expect
"hello" b.str check-expect

empty

!@ The following tests all use variables to declare new variables
   (some tests may be repeats of earlier tests) #$

!@ Create a new variable by using an old dot-operated variable as the value #$
1 a meme
"hello" a meme
a.str b meme

1 a check-expect
"hello" b check-expect
1 a.num check-expect
"hello" a.str check-expect
b.num check-error

!@ Create a new variable by using an old non-dot-operated variable as the value #$
1 c meme
"hello" c meme
c d meme

1 c check-expect
1 d check-expect
1 c.num check-expect
1 d.num check-expect





!@ Create a new variable by using an old dot-operated variable as the value #$
1 e meme
(spicy (3 ("hello" f meme) meme) meme)
!@"hello" f meme
3 f meme
spicy f meme#$

f e meme

3 e check-expect
"hello" f check-expect
3 e.num check-expect
3 f.num check-expect
spicy e.bool check-expect
spicy f.bool check-expect
"hello" e.str check-expect
"hello" f.str check-expect

!@ nested meme with stress test#$
(spicy (((spicy not) (normie (13 4 //+ meme 2 ! ^ - 13 4 3 + 5 * % / 1 13 4 2 ! ^ - 13 4 9 v/ + 5 * % / - <>) xor) nor) not) check-expect)

I like memes



!@ Equal/Not equal #$

empty

!@ Errors #$
1 a meme
spicy b meme
1 2 3 = check-error
1.num 1 = check-error
spicy.num 1 = check-error
"hello".num 1 = check-error
a.in 1 = check-error
b.bool 1 = check-error
b.num 1 = check-error
c.num 1 = check-error
1 c = check-error
1 b = check-error
spicy 1 = check-error
"hello" 1 = check-error
"hello" spicy = check-error
"hello" 1 = check-error
"hello" a meme
a b = check-error


!@ Test with two literals #$
spicy 1 1 = check-expect
spicy spicy spicy = check-expect
spicy "hello" "hello" = check-expect
spicy "" "" = check-expect
spicy [] [] = check-expect


!@ Tests with one variable of a singular type #$
1 x meme
spicy x.num 1 = check-expect
spicy 1 x.num = check-expect
spicy x 1 = check-expect
spicy 1 x = check-expect
spicy x.num x.num = check-expect
spicy x x = check-expect

"hello" g meme
normie g.str "goodbye" = check-expect
normie "goodbye" g.str = check-expect
normie g "goodbye" = check-expect
normie "goodbye" g = check-expect
spicy g.str g.str = check-expect
spicy g g = check-expect


!@ Tests with one variable of multiple types
   num was declared first #$
"hello" x meme
spicy x.num 1 = check-expect
spicy 1 x.num = check-expect
spicy x 1 = check-expect
spicy 1 x = check-expect
spicy x.num x.num = check-expect
spicy x.str "hello" = check-expect
spicy "hello" x.str = check-expect
spicy x "hello" = check-expect
spicy "hello" x = check-expect


!@ Tests with two variables, one of a singular type, one of multiple types
   num was declared first for both variables #$
2 y meme
normie x y = check-expect
normie y.num x = check-expect
normie x y.num = check-expect
normie x.num y = check-expect
normie y x.num = check-expect 
normie x.num y.num = check-expect


!@ Tests with two variables, both of multiple types
   num was declared first for x;
   str was declared first for z#$ 
"hello" z meme
2 z meme
spicy x z = check-expect
normie z x = check-expect
normie z.num x = check-expect
normie x z.num = check-expect
normie x.num z = check-expect
normie z x.num = check-expect
normie x.num z.num = check-expect
spicy z.str x = check-expect
spicy x z.str = check-expect
spicy x.str z = check-expect
spicy z x.str = check-expect
spicy x.str z.str = check-expect

spicy q meme
2 q meme
"hello" q meme

"hello" r meme
1 r meme

spicy q.str r.str = check-expect
normie r.num q.num = check-expect
spicy q r = check-expect
normie r q = check-expect
spicy q q = check-expect
spicy r r = check-expect

I like memes

!@ Nested expressions #$

empty

seven //+ meme

!@mild 3 larger? not normie spicy or and check-expect#$
2 1 + mild 1 meme meme check-error
1 "hello" spicy 1 x meme meme meme check-expect
Nothing 1 print print check-expect
3 2 1 + check-expect
18 6 5 4 3 2 1 - + - + * check-expect
3 3 4 - 2 1 * + 0 //xor meme + check-expect
spicy 13 4 x meme 2 ! ^ - 13 4 3 + 5 * % / 1 13 4 2 ! ^ - 13 4 9 v/ + 5 * % / - <> check-expect
spicy normie normie nor 9 v/ 3 4 - 1 2 * + + + 4 = if check-expect
3 normie normie nor 9 v/ 3 4 - 1 2 * + + + 10 = if check-expect
"3" "3" y meme check-expect
y x + check-error
"3" b meme 3 a meme = check-error
!@10 3 4 - 2 1 * + + + check-expect#$
9 2 + + check-expect
14 + + + check-expect
* check-error
* 1 2 3 check-error
5 spicy 3 * + check-error
/ 3 0 check-error
+ 3 empty check-error
1 1 check-expect
14 seven + + check-expect
3 13 4 2 ^ - 13 4 3 + 5 * % / check-expect
spicy normie spicy and normie normie or nand normie spicy spicy and or and check-expect
13 1 4 3 * + check-expect
seven + check-expect
//- "hello" spicy 1 //- meme meme meme check-expect
1 "hello" spicy 1 //- meme meme meme check-expect
1 - check-expect
spicy -.bool check-expect
"hello" -.str check-expect
//* 1 //* meme check-expect
* 2 * meme check-expect
12 seven 5 - meme + check-expect
25 4 ! 1 //! meme + check-expect
spicy //and spicy //and meme and check-expect
14 //+ //+ + check-expect
14 //+ + + check-expect
14 + //+ + check-expect
14 + + //+ check-error
"3" "3" q meme check-expect
3 4 - 1 2 * //+ + + 10 = 
3 normie normie nor 9 v/ 3 4 - 1 2 * //+ + + 10 = if check-expect
3 normie normie nor 9 v/ 3 4 - 1 2 * + //+ + 10 = if check-expect
spicy normie normie nor 9 v/ 3 4 - 1 2 * + + //+ 10 = if check-expect
1 2 1 ((1 2 *) 2 =) if check-expect
2 2 1 ((1 2 *) 4 =) if check-expect
5 "hello" //- meme check-expect 
35 seven 5 - meme * check-expect
2 2 //- meme check-expect
224 seven 5 - ^ * check-expect


!@
A TOMORROW PROBLEM:
"ab" "a" "b" ++ check-expext
2 "b" b meme meme 1 "a" a meme meme ++ 3 =
#$


I like memes

empty

3 1 2 + check-expect
3.2 1 2.2 + check-expect
3.1 1.1 2 + check-expect
3.3 1.1 2.2 + check-expect
4 1.1 2.9 + check-expect

2.86356421266 8.2 v/ check-expect
4 16 v/ check-expect
8.2 ! check-error
42.4399889428 4.5 2.3 ^ check-expect

hitMe x meme
[-1.2] x -1.2 append check-expect
[-1.2, -1] x -1.0 append check-expect
[2.3, -1.2, -1] x 2.3 push check-expect
[2.3, 0, -1.2, -1] x (today 1 +) 0.0 insert check-expect
[2.3, 0, -1.2, -3.2] (x (today 3.0 +) ((x (today 1.0 +) get) -3.2 +) put) check-expect

3.0 a meme
3 MEME check-expect
3 b meme
3 MEME check-expect
3.2 c meme
3.2 MEME check-expect

(1.2 (3 d meme) meme)
1.2 d check-expect
(3 (1.2 e meme) meme)
3 e check-expect

3 1.2.num meme check-error
2 d.num .8 + check-expect
2 d.num 0.8 + check-expect
2 d.num .80000000000 + check-expect
2 d.num 00000000000.8 + check-expect
2 d.num 0000000000.800000000 + check-expect
d.str check-error

I like memes

empty


x in i for check-error
in i for check-error
i for check-error
for check-error
<~  x ina i for check-error
   i print 

[1, 2, 3, 4] x meme
<~  x in i for check-expect
<~   i print
Nothing
4 i check-expect


["Matthew", "Nathan", "Epstein"] y meme
<~  y in i for check-expect
<~   i.str print 
Nothing
"Epstein" i.str check-expect


["Matthew", 123, mild, Nothing, x, spicy] z meme
<~  ((z length) range) in j for check-expect
<~   (z (j today +) get) print 
Nothing
5 j check-expect


[spicy, 132, "hello", []] p meme
[p, p, p, p] q meme
<~    					((q length) range) in i for check-expect
<~ (((q (i today +) get) length) range) in j for
<~ ((q (i today +) get) (j today +) get) print
										    Nothing

<~ z in m for 
	Nothing

"Matthew" m check-expect
123 m.num check-expect
spicy m.bool check-expect
"Matthew" m.str check-expect
x m.list check-expect
[1, 2, 3, 4] m.list check-expect
Nothing m.nonetype check-expect

"hello" k ["hello", 1, normie] in k for check-expect




I like memes

empty

[n] factorial define
<~ 					(n 1 =) if
<~						   n
	 ((1 n -) factorial) n *
donezo

[a, b, c] add_nums define
	4 x meme
	x print
	a b c x + + +
donezo

[] test_check_expect define
	3 1 2 + check-expect
	0
donezo

[] test_check_error define
	1 spicy + check-error
	0
donezo

[] test_seven define
	7
donezo

[] test_correct_seven define
	seven
donezo

[] test_incorrect_number define
	7 test_incorrect_number
donezo


[] test_MEME define
	1 2 +
	3
donezo

[] test_claim define
	1 2 = claim
donezo



!@
[] error_test define
	call 1 +
donezo

[] call define
	1 2 3 +
donezo
#$


!@Should return a Meme does not exist error because x is not defined within the function's scope#$ 
!@
1 2 +
[1, 2, 3] x meme
x func_name define
	3 x meme
	4 y meme
	x y +
donezo
#$

!@ Meme is reserved error #$
!@
[1] func_name define
	3 x meme
	4 y meme
	x y +
donezo
#$

!@ Can't define a function within a funciton error #$
!@
[1] func_name define
	[1, 2] func_name2 define
donezo
#$

!@ Normie meme type error #$
!@
123 func_name define
	3 x meme
	4 y meme
	x y +
donezo
!@

!@ Meme is reserved error #$
!@
[arg1, arg2, arg3] + define
	3 x meme
	4 y meme
	x y +
donezo
#$

!@ Meme contains a reserved symbol error #$
!@
[arg1, arg2, arg3] ab<~ad define
	3 x meme
	4 y meme
	x y +
donezo
#$

!@ No function definition in progress error #$
!@
donezo
#$

!@ Endless memeer error #$
!@
[arg1, arg2, arg3] a_name define
	3 x meme
	4 y meme
	x y +
#$

720 6 factorial check-expect
spicy factorial check-error
spicy x meme
spicy x meme
x print !@ should print spicy #$
10 (3 2 1 add_nums) check-expect !@ function should print 4 #$
x print !@ should print spicy #$
test_check_expect check-error
test_check_error check-error
test_seven check-error
test_seven check-error
seven test_correct_seven check-expect
test_incorrect_number check-error
3 test_MEME check-expect
test_MEME
3 MEME check-expect
!@test_claim claim should fail#$

!@error_test should result in an incorrect number of memes error--not a normie meme type one #$







I like memes


!@ Larger/Smaller #$
empty

!@ Errors #$

1 a meme
1 a larger? check-error
larger? check-error
spicy larger? check-error
33.num larger? check-error
"hello".num larger? check-error
a.it larger? check-error
b.num larger? check-error
a.bool larger? check-error
c larger? check-error
"hello" larger? check-error


!@ Tests with one literals #$
1 larger?
1 smaller?


!@ Test with one variable of a singular type #$
1 x meme
x larger?
x.num smaller?


!@ Test with one variable of multiple types
   bool was declared first #$
spicy x meme
x larger?
x.num smaller?


!@ Test with one variable of multiple types
   num was declared first #$
1 y meme
spicy y meme
y larger?
y.num smaller?



I like memes

empty

123 xyz meme


hitMe a meme
[1] a 1 append check-expect
[2, 1] a 2 push check-expect
[[2, 1]] ((hitMe b meme) a append) check-expect
1 b length check-expect


hitMe x meme
0 x length check-expect
spicy x null? check-expect
[1] x 1 append check-expect
1 x length check-expect
normie x null? check-expect



!@ appending #$

[1, "didn't, hello"] x "didn't, hello" append check-expect
[1, "didn't, hello", 2] x 2 append check-expect
[1, "didn't, hello", 2, []] x hitMe append check-expect
[1, "didn't, hello", 2, [], " , [] ' "] x " , [] ' " append check-expect
[1, "didn't, hello", 2, [], " , [] ' ", 123] x xyz append check-expect
[1, "didn't, hello", 2, [], " , [] ' ", 123, normie] x normie append check-expect
seven x length check-expect
[[1, "didn't, hello", 2, [], " , [] ' ", 123, normie], 1, "didn't, hello", 2, [], " , [] ' ", 123, normie] x x push check-expect
normie x null? check-expect
8 x length check-expect


!@ get #$

[1, "didn't, hello", 2, [], " , [] ' ", 123, normie] (x today get) check-expect
123 (x (6 today +) get) check-expect
normie (x (1 today -) get) check-expect
[1, "didn't, hello", 2, [], " , [] ' ", 123, normie] (x ((x length) today -) get) check-expect

b (today 1 +) get check-error
[2, 1] b today get check-expect
[2, 1] b (1 today -) get check-expect
b j get check-error
b x get check-error
b spicy get check-error
spicy today get check-error
j today get check-error
1 today get check-error


!@ put #$

[[2, 1]] b check-expect
[1] (b today 1 put) check-expect
[1] b check-expect

[[1, 2], 1, "didn't, hello", 2, [], " , [] ' ", 123, normie] (x today [1, 2] put) check-expect
					<~ (x (today 5 +) "DAVID STERN  IS   REALLY    COOL" put) check-expect
[[1, 2], 1, "didn't, hello", 2, [], "DAVID STERN  IS   REALLY    COOL", 123, normie]
[[1, 2], 1, "didn't, hello", 2, [], normie, 123, normie] (x (3 today -) normie put) check-expect
[[1, 2], 123, "didn't, hello", 2, [], normie, 123, normie] (x (today (b length) +) xyz put) check-expect
[0, 123, "didn't, hello", 2, [], normie, 123, normie] (x ((x length) today -) 0 put) check-expect
[[1, 2], 123, "didn't, hello", 2, [], normie, 123, normie] (x today [1, 2] put) check-expect

(xyz today 1 put) check-error
(j today 1 put) check-error
(mild today 1 put) check-error
(x spicy 1 put) check-error
(x j 1 put) check-error
(x x 1 put) check-error

(x (today 8 +) x put) check-error
(b (today 1 +) b put) check-error


!@ init #$

-1 6 init check-error
[] 0 6 init check-expect
[6, 6, 6, 6] 4 6 init check-expect
spicy 6 init check-error
j 6 init check-error
x 6 init check-error
hitMe 6 init check-error
[6, 6, 6, 6] (xyz 127 -) 6 init check-expect

<~  [[1, 2], 123, "didn't, hello", 2, [], normie, 123, normie]] 3 x init check-expect
<~  [[1, 2], 123, "didn't, hello", 2, [], normie, 123, normie],
   [[[1, 2], 123, "didn't, hello", 2, [], normie, 123, normie],
[spicy, spicy, spicy] 3 spicy init check-expect
[123, 123, 123] 3 xyz init check-expect
["hello", "hello", "hello"] 3 "hello" init check-expect


empty

!@ insert #$

hitMe x meme
x (1 today -) 0 insert check-error
[0] x today 0 insert check-expect
[-1, 0] x (today) -1 insert check-expect
[-1, 0, 2] x (today 2 +) 2 insert check-expect
x (today 4 +) 2 insert check-error
[-1, 0, 1, 2] x (1 today -) 1 insert check-expect


("hello" (3 (normie a meme) meme) meme)
hitMe y meme
[spicy] y today spicy insert check-expect
["      ", spicy] y today "      " insert check-expect
[["      ", spicy], "      ", spicy] y today y insert check-expect
[3, ["      ", spicy], "      ", spicy] y today a.num insert check-expect

(a.num today 1 insert) check-error
(a.bool today 1 insert) check-error
(a.str today 1 insert) check-error

(y a.bool 0 insert) check-error
(y a.str 0 insert) check-error
(y y b insert) check-error


!@ remove (rippo) #$

[-1, 0, 1] x (1 today -) rippo check-expect
[-1, 1] x (2 today -) rippo check-expect
[1] x today rippo check-expect
[] x today rippo check-expect


(y a.bool rippo) check-error
(y a.str rippo) check-error
(y y rippo) check-error

(a.num today rippo) check-error
(a.bool today rippo) check-error
(a.str today rippo) check-error

[["      ", spicy], "      ", spicy] (y (4 today -) rippo) check-expect
y
y (3 today -) a.num put


!@ tests with mild #$
[1, 2, "mild", 4] [1, 2, "mild"] 4 append check-expect
[1, 2, mild] 4 append

"mild" [1, 2, "mild"] (today 2 +) get check-expect
[1, 2, mild] (today 2 +) get

[1, 2, "mild"] [1, 2, 3] (today 2 +) "mild" put check-expect
[1, 2, 3] (today 2 +) mild put

[1, 2, "mild", 3] [1, 2, 3] (today 2 +) "mild" insert check-expect
[1, 2, 3] (today 2 +) mild insert

[1, 2, "mild", 3] [1, 2, 3] (today 2 +) "mild" insert check-expect
[1, 2, 3] (today 2 +) mild insert

[1, "mild"] [1, 2, "mild"] (today 1 +) rippo check-expect
[1, 2, mild] (today 1 +) rippo

["mild", "mild", "mild", "mild", "mild"] 5 "mild" init check-expect
5 [mild] init
5 mild init


!@ error checking for lists that have a bad value in them
   (eg. variable doesn't exist, type doesn't exist, etc.) #$
empty

[x] y meme check-error
[1, 2, x] [1, 2, x] = check-error
[1, 2, x] length check-error
[1, 2, x] null? check-error
[1, 2, x] print check-error
[1, 2, x] 4 append check-error
[1, 2, 3] [x] append check-error
[1, 2, x] (today 2 +) get check-error
[1, 2, x] (today 2 +) 3 put check-error
[1, 2, 3] (today 2 +) [x] put check-error
[1, 2, x] (today 2 +) 3 insert check-error
[1, 2, 3] (today 2 +) [x] insert check-error
[1, 2, x] (today 2 +) rippo check-error
3 [1, 2, x] init check-error
[1, 2, 3] [1, 2, x] check-expect check-error
[1, 2, x] [1, 2, 3] check-expect check-error
[1, 2, x] check-error
<~ [1, 2, x] in i for check-error
			i print

[1,] check-error
[1, ] check-error
[ 1] check-error
[, 1] check-error
[1,2, 3] check-error
[1, 2, 3] [1,  2, 3] check-expect
[1 , 2, 3] check-error
[1 ,2, 3] check-error

[1,] a meme check-error
[1, ] a meme check-error
[ 1] a meme check-error
[, 1] a meme check-error
[1,2, 3] a meme check-error
[1, 2, 3] [1,  2, 3] a meme check-expect
[1 , 2, 3] a meme check-error
[1 ,2, 3] a meme check-error

[1,] length check-error
[1, ] length check-error
[ 1] length check-error
[, 1] length check-error
[1,2, 3] length check-error
3 [1,  2, 3] length check-expect
[1 , 2, 3] length check-error
[1 ,2, 3] length check-error

[1,] null? check-error
[1, ] null? check-error
[ 1] null? check-error
[, 1] null? check-error
[1,2, 3] null? check-error
normie [1,  2, 3] null? check-expect
[1 , 2, 3] null? check-error
[1 ,2, 3] null? check-error

[1,] print check-error
[1, ] print check-error
[ 1] print check-error
[, 1] print check-error
[1,2, 3] print check-error
Nothing [1,  2, 3] print check-expect
[1 , 2, 3] print check-error
[1 ,2, 3] print check-error

[1,] 1 append check-error
[1, ] 1 append check-error
[ 1] 1 append check-error
[, 1] 1 append check-error
[1,2, 3] 1 append check-error
[1, 2, 3, 1] [1,  2, 3] 1 append check-expect
[1 , 2, 3] 1 append check-error
[1 ,2, 3] 1 append check-error

[] [1,] append check-error
[] [1, ] append check-error
[] [ 1] append check-error
[] [, 1] append check-error
[] [1,2, 3] append check-error
[[1, 2, 3]] [] [1,  2, 3] append check-expect
[] [1 , 2, 3] append check-error
[] [1 ,2, 3] append check-error

[1,] (today) get check-error
[1, ] (today) get check-error
[ 1] (today) get check-error
[, 1] (today) get check-error
[1,2, 3] (today) get check-error
1 [1,  2, 3] (today) get check-expect
[1 , 2, 3] (today) get check-error
[1 ,2, 3] (today) get check-error

[1,] today 1 put check-error
[1, ] today 1 put check-error
[ 1] today 1 put check-error
[, 1] today 1 put check-error
[1,2, 3] today 1 put check-error
[2, 2, 3] [1,  2, 3] today 2 put check-expect
[1 , 2, 3] today 1 put check-error
[1 ,2, 3] today 1 put check-error

[] today [1,] put check-error
[] today [1, ] put check-error
[] today [ 1] put check-error
[] today [, 1] put check-error
[] today [1,2, 3] put check-error
[[1, 2, 3]] [] today [1,  2, 3] put check-expect
[] today [1 , 2, 3] put check-error
[] today [1 ,2, 3] put check-error

[1,] today 1 insert check-error
[1, ] today 1 insert check-error
[ 1] today 1 insert check-error
[, 1] today 1 insert check-error
[1,2, 3] today 1 insert check-error
[0, 1, 2, 3] [1,  2, 3] today 0 insert check-expect
[1 , 2, 3] today 1 insert check-error
[1 ,2, 3] today 1 insert check-error

[] today [1,] insert check-error
[] today [1, ] insert check-error
[] today [ 1] insert check-error
[] today [, 1] insert check-error
[] today [1,2, 3] insert check-error
[[1, 2, 3]] [] today [1,  2, 3] insert check-expect
[] today [1 , 2, 3] insert check-error
[] today [1 ,2, 3] insert check-error

[1,] today rippo check-error
[1, ] today rippo check-error
[ 1] today rippo check-error
[, 1] today rippo check-error
[1,2, 3] today rippo check-error
[2, 3] [1,  2, 3] today rippo check-expect
[1 , 2, 3] today rippo check-error
[1 ,2, 3] today rippo check-error

3 [1,] init check-error
3 [1, ] init check-error
3 [ 1] init check-error
3 [, 1] init check-error
3 [1,2, 3] init check-error
[[1, 2, 3], [1, 2, 3], [1, 2, 3]] 3 [1,  2, 3] init check-expect
3 [1 , 2, 3] init check-error
3 [1 ,2, 3] init check-error

[1] [1,] check-expect check-error
[1] [1, ] check-expect check-error
[1] [ 1] check-expect check-error
[1] [, 1] check-expect check-error
[1, 2, 3] [1,2, 3] check-expect check-error
[1, 2, 3] [1 , 2, 3] check-expect check-error
[1, 2, 3] [1 ,2, 3] check-expect check-error

[1,] [1] check-expect check-error
[1, ] [1] check-expect check-error
[ 1] [1] check-expect check-error
[, 1] [1] check-expect check-error
[1,2, 3] [1, 2, 3] check-expect check-error
[1 , 2, 3] [1, 2, 3] check-expect check-error
[1 ,2, 3] [1, 2, 3] check-expect check-error


Nothing [1,] in i for check-error
Nothing [1, ] in i for check-error
Nothing [ 1] in i for check-error
Nothing [, 1] in i for check-error
Nothing [1,2, 3] in i for check-error
Nothing [1 , 2, 3] in i for check-error
Nothing [1 ,2, 3] in i for check-error
Nothing Nothing [1, 2,  3] in i for check-expect



I like memes

empty


													   <~ normie if check-expect
													   <~ 1
											   <~ normie if
											   <~ 1
								  	 !@<~ normie if
											 abc
											 def
											 ghi
											  #$
										       <~
									   <~ normie if
									   <~ 1
							   <~ normie if
							   <~ 1
					   <~ normie if
					   <~ 1
			   <~ normie if
		   	   <~ 1
	   <~ normie if
	   <~ 1
<~ spicy if
<~ 1
1 1

"my name is fred" x meme
spicy ("my name is fred" x =) check-expect


<~abc" y meme
"def
spicy ("def abc" y =) check-expect


<~abc" z meme
<~def ghi
<~jkl
"mno
spicy ("mno jkl def ghi abc" z =) check-expect



1 <~abc meme check-error

<~(1 x meme) + check-expect
4 !@abc#$3


I like memes

empty

Nothing x meme
Nothing y meme

spicy x y = check-expect

(Nothing (1 z meme) meme)
Nothing z.nonetype check-expect
z.nonetype
Nothing MEME check-expect
1.2
2 1 z + check-expect
1 z.nonetype + check-error

[Nothing, Nothing, Nothing, Nothing, Nothing] ((5 Nothing init) a meme) check-expect
a (today 2 +) get
a (today 2 +) get "Nothing" = check-error
spicy a (today 2 +) get Nothing = check-expect

1 Nothing meme check-error


I like memes

empty


!@
line of code here
#$ !@""#$ !@
#$

empty check-expect check-error
check-error check-expect check-error


g check-error
g] check-error
g[ check-error


1
1 1 check-expect
spicy
spicy spicy check-expect
"hello"
"hello" "hello" check-expect
[1, normie, "hello", [1, 2]]
[1, normie, "hello", [1, 2]] [1, normie, "hello", [1, 2]] check-expect

123 ab meme
123 ab check-expect

123 //seven meme
seven seven check-expect

123 //+ meme
123 + check-expect
123 * check-error


"aldjksf!@#$%^&*()[][][]][[[[]]]]]]]]]][[[[[,,,meme<~" x meme
"aldjksf!@#$%^&*()[][][]][[[[]]]]]]]]]][[[[[,,,meme<~" x check-expect

[[1, 2], 123, "didn't, hello", 2, [], normie, 123, normie] x meme
<~  [[1, 2], 123, "didn't, hello", 2, [], normie, 123, normie]] 3 x.list init check-expect
<~  [[1, 2], 123, "didn't, hello", 2, [], normie, 123, normie],
   [[[1, 2], 123, "didn't, hello", 2, [], normie, 123, normie],

<'>abcas<'> check-error
<'>abc as<'> check-error
1 abc<'>def meme check-error

I like memes


!@ Print #$
empty

!@ Errors #$

1 a meme
spicy a print check-error
print check-error
1.num print check-error
33.bool print check-error
"hello".bool print check-error
a.it print check-error
b.bool print check-error
a.bool print check-error
c print check-error
1 print 2 + check-error


!@ Tests with one literals #$
Nothing 1 print check-expect
Nothing spicy print check-expect
Nothing "hello" print check-expect


!@ Test with one variable of a singular type #$
1 x meme
Nothing x print check-expect
Nothing x.num print check-expect


!@ Test with one variable of multiple types
   num was declared first #$
spicy x meme
"hello" x meme
Nothing x print check-expect
Nothing x.bool print check-expect
Nothing x.str print check-expect

"Nothing" i meme
Nothing j meme
"Nothing" i check-expect
Nothing j check-expect
i.nonetype check-error
j.str check-error
normie i j = check-error


1 print
spicy print
"hello" print
[1, 2, 3] print
Nothing print





I like memes

empty


1 a meme
1 a range check-error
range check-error
spicy range check-error
33.num range check-error
"hello".num range check-error
a.it range check-error
b.num range check-error
a.bool range check-error
c range check-error
"hello" range check-error


[0, 1, 2, 3, 4, 5] 6 range check-expect
[] 0 range check-expect
[] -1 range check-expect
8.2 range check-error
spicy range check-error
"hello" range check-error
[1] range check-error
[1, spicy, "hello"] range check-error
["hello", 2, mild, [4], -0.231] m meme
[0, 1, 2, 3, 4] ((m length) range) check-expect


[3, 4, 5] 6 3 rangeFrom check-expect
[] 0 0 rangeFrom check-expect
[] 2 3 rangeFrom check-expect
[] -4 -3 rangeFrom check-expect
[] -1 1 rangeFrom check-expect
3 1.2 rangeFrom check-error
3.2 3 rangeFrom check-error
3.2 2.9 rangeFrom check-error
1 spicy rangeFrom check-error
1 "hello" rangeFrom check-error
1 [1] rangeFrom check-error
1 [1, spicy, "hello"] rangeFrom check-error
["hello", 2, mild, [4], -0.231] m meme
[2, 3, 4] ((m length) 2 rangeFrom) check-expect


I like memes

empty

7 check-error
seven seven check-expect 
13 4 x meme 2 ! ^ - 13 4 3 + 5 * % / 1 13 7 2 ! ^ - 13 4 9 v/ + 5 * % / - <> check-error
spicy 13 4 x meme 2 ! ^ - 13 4 3 + 5 * % / 1 13 seven 2 ! ^ - 13 4 9 v/ + 5 * % / - <> check-expect

I like memes


empty

spicy spicy check-expect

				-1 x meme
		 <~ (5 x <) while
((1 x +) x meme) print 
Nothing MEME check-expect

			   											hitMe (1 y meme) meme
													 <~ 10 (y length) < while
										(y (((y 3 *) 2 +) y meme) append)
  [5, 17, 53, 161, 485, 1457, 4373, 13121, 39365, 118097] y.list check-expect


3 1 2 + check-expect check-error

-1 x meme
  	        <~	        spicy if check-expect check-error
  		    <~ spicy while
<~	((1 x +) x meme) print  
					  normie
"Meme failed, as expected" MEME check-expect							   


!@Infinite loop hooray!#$
!@
-1 x meme
<~				        spicy if
<~			      spicy while
<~	((1 x +) x meme) print
					   normie
#$



  	        <~	        spicy if check-expect
  		    <~ (5 x <) while
<~	((1 x +) x meme) print  
<~					  normie
						 Nothing
MEME
"Check was Nothing, as expected" MEME check-expect



5 a meme
<~ (5 a <) while check-expect
<~ 	   a print
				Nothing
"Check was Nothing, as expected" MEME check-expect


Nothing "" normie while check-expect
"Check was Nothing, as expected" MEME check-expect


1 print mild while

(1 (spicy g meme) meme)
spicy MEME check-expect
(1 (spicy g meme) meme)
1 MEME.num check-expect
"Check was 1, as expected" MEME check-expect
"Check was <'>Check was 1, as expected<'>, as expected" MEME check-expect
"Check was <'>Check was <'>Check was 1, as expected<'>, as expected<'>, as expected" MEME check-expect


while check-error
spicy while check-error
1 print 1 while check-error

0 k meme
5 ((k 1 +) k meme) (5 k <) while check-expect



I like memes

!@ Arithmetic #$

empty

!@ Errors #$

1 a meme
spicy b meme
1 + check-error
1 2 3 + check-error
1.num 1 + check-error
spicy.num 1 + check-error
"hello".num 1 + check-error
a.in 1 + check-error
b.bool 1 + check-error
b.num 1 + check-error
c.num 1 + check-error
spicy 1 + check-error
"hello" 1 + check-error
c 1 + check-error
0 3 / check-error
0 3 % check-error

!@ Test with two literals #$
2 1 1 + check-expect
2 1 3 - check-expect
6 2 3 * check-expect
3 2 6 / check-expect
1 3 seven % check-expect
8 3 2 ^ check-expect
(720 (6 !) check-expect)
(15 (225 v/) check-expect)
1 1 int check-expect
1 1.2 int check-expect
-1 -1 int check-expect
-1 -1.2 int check-expect






!@ Tests with one variable of a singular type #$
1 x meme
2 x.num 1 + check-expect
2 1 x.num + check-expect
2 x 1 + check-expect
2 1 x + check-expect
2 x.num x.num + check-expect
2 x x + check-expect

!@ Tests with one variable of multiple types
   num was declared first #$
spicy x meme
2 x.num 1 + check-expect
2 1 x.num + check-expect
2 x 1 + check-expect
2 1 x + check-expect
2 x.num x.num + check-expect
2 x x + check-expect

!@ Tests with two variables, one of a singular type, one of multiple types
   num was declared first for both variables #$
1 y meme
2 x y + check-expect
2 y.num x + check-expect
2 x y.num + check-expect
2 x.num y + check-expect
2 y x.num + check-expect 
2 x.num y.num + check-expect

!@ Tests with two variables, both of multiple types #$
spicy y meme
2 x y + check-expect
2 y.num x + check-expect
2 x y.num + check-expect
2 x.num y + check-expect
2 y x.num + check-expect 
2 x.num y.num + check-expect

!@ Tests random, as best as we can #$
1 2 rando check-error
2.1 1 rando check-error
2 1.2 rando check-error
2.1 1.2 rando check-error

-6 a meme
				<~ 5 a < while
5 ((a 1 +) a meme) rando print


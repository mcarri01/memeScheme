
I like memes


!@ Define #$
empty

!@ Errors #$

1.num x meme check-error
spicy.bool x meme check-error
"hello".str x meme check-error
1 g meme
g.in x meme check-error
g.bool x meme check-error
g.str x meme check-error
b.str x meme check-error
b x meme check-error
1 12 meme check-error
1 spicy meme check-error
1 normie meme check-error
1 mild meme check-error
1 "hello" meme check-error
1 error meme check-error
1 MEME meme check-error
1 b.num meme check-error
1 //x meme check-error
1 b.num check-error
1 ab"cd" meme check-error
1 ab]cd meme check-error
1 ab[cd meme check-error
1 [ab[]cd meme check-error
1 ab][cd meme check-error
1 ab.cd meme check-error
1 a<~bcd meme check-error



!@ Tests with one literal as assignment #$
1 x meme
1 x print check-expect
1 x.num print check-expect
spicy x meme
1 x print check-expect
spicy x.bool print check-expect
2 x meme
2 x print check-expect
2 x.num print check-expect
spicy y meme
spicy y print check-expect
spicy x.bool print check-expect
"hello" z meme
"hello" z print check-expect
"hello" z.str print check-expect
1 z meme
"hello" z meme
"hello" z print check-expect
"hello" z.str print check-expect
1 z.num print check-expect
2 z meme
"hello" z print check-expect
2 z.num print check-expect


!@ Tests with one variable of a singular type as assignment #$
1 a meme
a b meme
1 b print check-expect
1 b.num print check-expect
spicy c meme
c d meme
spicy d print check-expect
spicy d.bool print check-expect
"hello" e meme
e f meme
"hello" f print check-expect
"hello" f.str print check-expect


!@ Test with one variable of multiple types as assignment
   num was declared first #$
1 m meme
spicy m meme
"hello" m meme
m n meme
1 n print check-expect
1 n.num print check-expect
spicy n.bool print check-expect
"hello" n.str print check-expect

   !@ bool was declared first #$
spicy o meme
"hello" o meme
1 o meme
o p meme
spicy p print check-expect
spicy p.bool print check-expect
"hello" p.str print check-expect
1 p.num print check-expect

   !@ str was declared first #$
"hello" q meme
1 q meme
spicy q meme
q r meme
"hello" r print check-expect
"hello" r.str print check-expect
1 r.num print check-expect
spicy r.bool print check-expect

	!@ assignment with dot operator #$
1 s meme
spicy s meme
"hello" s meme
s.num t meme
1 t print check-expect
1 t.num print check-expect

s.bool u meme
spicy u print check-expect
spicy u.bool print check-expect

s.str v meme
"hello" v print check-expect
"hello" v.str print check-expect


!@ Define a variable from a previous variable
   (some of these tests might be repeats) #$

empty
1 a meme
"hello" a meme
a b meme
1 a print check-expect
1 b print check-expect
1 a.num print check-expect
1 b.num print check-expect
"hello" a.str print check-expect
"hello" b.str print check-expect

empty

!@ The following tests all use variables to declare new variables
   (some tests may be repeats of earlier tests) #$

!@ Create a new variable by using an old dot-operated variable as the value #$
1 a meme
"hello" a meme
a.str b meme

1 a print check-expect
"hello" b print check-expect
1 a.num print check-expect
"hello" a.str print check-expect
b.num print check-error

!@ Create a new variable by using an old non-dot-operated variable as the value #$
1 c meme
"hello" c meme
c d meme

1 c print check-expect
1 d print check-expect
1 c.num print check-expect
1 d.num print check-expect





!@ Create a new variable by using an old dot-operated variable as the value #$
1 e meme
(spicy (3 ("hello" f meme) meme) meme)
!@"hello" f meme
3 f meme
spicy f meme#$

f e meme

3 e print check-expect
"hello" f print check-expect
3 e.num print check-expect
3 f.num print check-expect
spicy e.bool print check-expect
spicy f.bool print check-expect
"hello" e.str print check-expect
"hello" f.str print check-expect

!@ nested meme with stress test#$
(spicy (((spicy not) (normie (13 4 //+ meme 2 ! ^ - 13 4 3 + 5 * % / 1 13 4 2 ! ^ - 13 4 9 v/ + 5 * % / - <>) xor) nor) not) check-expect)
